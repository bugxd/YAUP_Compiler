<project name="YAPL Compiler - Backend Testing" default="eval-all" basedir="">
	<description>
    ANT build file for testing the YAPL compiler backend.
    M. Taschwer
	</description>
	
    <!-- customize to your environment -->
    <property name="topdir" location="../../../../../"/>
    <property name="ant-contrib-jar" location="${topdir}/resources/ant-contrib.jar"/>
    <property name="marsjar" location="${topdir}/resources/mars.jar"/>

	<!-- source and build directories (need not be modified) -->
	<property name="srcdir" location="${topdir}/src"/>
	<property name="builddir" location="${topdir}/classes"/>

    <!-- predefined assembler code emitted by your backend implementation (if needed) -->
    <property name="asm-predefined" location="${topdir}/predefined.asm"/>

    <!-- list of Java test classes -->
    <property name="testclasses" value="Test1,Test2,Test3,Test4,Test5,Test6,Test_Types"/>
    
    <!-- properties for invoking 'eval' target directly -->
    <property name="mainclass" value="yapl.test.backend.rm.Test1"/>
    <property name="asmfile" location="Test1.asm"/>
    <property name="outputfile" location="Test1.txt"/>
    <property name="truefile" location="Test1.true"/>

    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="${ant-contrib-jar}"/>
        </classpath>
    </taskdef>
	
	<target name="mkdirs">
		<mkdir dir="${builddir}" />
	</target>

	<target name="compile-java" depends="mkdirs"
        description="compile the sources" >
		<javac srcdir="${srcdir}" destdir="${builddir}" debug="on" includeantruntime="false">
			<include name="yapl/impl/backend/*.java"/>
			<include name="yapl/interfaces/*.java"/>
			<include name="yapl/test/backend/rm/*.java"/>
		</javac>
	</target>

	<target name="run-backend" depends="compile-java" 
		description="runs 'mainclass' with argument 'asmfile' (given by properties).">
		<java classname="${mainclass}">
			<classpath>
				<pathelement location="${builddir}"/>
				<pathelement path="${java.class.path}"/>
			</classpath>
            <!-- set a Java System Property that can be used by your backend implementation (if needed) -->
            <sysproperty key="yapl.predefined.asm" value="${asm-predefined}"/>
            <arg value="${asmfile}"/>
		</java>
	</target>

	<target name="run-asm" depends="run-backend" 
		description="executes generated code 'asmfile', writing output to 'outputfile'">
		<java jar="${marsjar}" fork="true" output="${outputfile}">
            <arg value="nc"/>
			<arg value="sm"/>
			<arg value="${asmfile}"/>
		</java>
	</target>
    
	<target name="eval" depends="run-asm" 
		description="evaluate 'asmfile' generated by 'mainclass', by comparing 'outputfile' to 'truefile'">
		<fail message="output file is not correct: ${outputfile}">
			<condition>
				<not>
					<filesmatch file1="${outputfile}" file2="${truefile}" textfile="true"/>
				</not>
			</condition>
		</fail>
	</target>
	
	<target name="eval-all" description="evaluate all test cases">
		<var name="npassed" value="0"/>
        <var name="ntotal" value="0"/>
		<for param="testname" list="${testclasses}">
			<sequential>
				<trycatch>
					<try>
						<antcall target="eval">
							<param name="mainclass" value="yapl.test.backend.rm.@{testname}"/>
							<param name="asmfile" location="@{testname}.asm"/>
							<param name="outputfile" location="@{testname}.txt"/>
							<param name="truefile" location="@{testname}.true"/>
						</antcall>
						<echo>@{testname}: PASSED</echo>
						<math result="npassed" operand1="${npassed}" operation="+" operand2="1" datatype="int"/>
					</try>
					<catch>
						<echo>@{testname}: FAILED</echo>
					</catch>
				</trycatch>
                <math result="ntotal" operand1="${ntotal}" operation="+" operand2="1" datatype="int"/>
            </sequential>
		</for>
		<echo>Tests passed: ${npassed}/${ntotal}</echo>
	</target>
	
	<target name="clean" description="remove generated files">
		<delete>
			<fileset dir="" includes="*.asm *.txt" />
            <dirset dir="${builddir}"/>
		</delete>
	</target>
	
</project>
