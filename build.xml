<project name="The YAPL Compiler" default="compile-java" basedir=".">
	<description>
ANT build file for the YAPL compiler.

User-relevant properties: (customize to your environment)
  src         - directory containing Java source files
  build       - directory where to put the compiled Java files
  javacc      - home directory of the JavaCC installation
  ant-contrib - path to ant-contrib JAR file
  mars-jar    - path to MARS JAR file
  version     - which YAPL compiler version to test (e.g. parser, symbolcheck, ...)
  yapl        - YAPL source file
  outfile     - file where generated target code is written to
  log         - file where compiler messages are written to
	</description>

    <property name="src" location="src"/>
    <property name="build" location="ant-bin"/>
    <property name="javacc" location="resources/javacc-6.0"/>
    <property name="ant-contrib" location="resources/ant-contrib.jar"/>
    <property name="mars-jar" location="resources/mars.jar"/>
    <property name="version" value="codegen"/>
    <property name="yapl" location="testfiles/${version}/test01.yapl"/>
    <property name="outfile" value="${yapl}.asm"/>
    <property name="log" value="${yapl}.log"/>
    <property name="execlog" value="${yapl}.execlog"/>
    <property name="truefile" value="${yapl}.true"/>

    <!-- custom properties for parser -->
    <property name="parserdir" location="${src}/yapl/compiler"/>
    <property name="parserfile" location="${parserdir}/CA2_3.jj"/>
    <property name="parserclass" value="yapl.compiler.CA2_3"/>
	
	<!-- test files for code generating compiler -->
    <property name="test-dir" location="testfiles/codegen"/>
	<property name="test-files" value="test01,test02,test03,test04,test05,test06,test07,test08,test09,test10,test11,test12,test13,test14,test15,test16,test17,test18,test19,test20,test21,test22,test23,test24,test25"/>

    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="${ant-contrib}"/>
        </classpath>
    </taskdef>

    <target name="mkdirs">
        <mkdir dir="${build}"/>
    </target>

	<target name="compile-ant-task">
		<javac srcdir="${src}" destdir="${build}" includeantruntime="true">
			<include name="yapl/ant/*.java"/>
		</javac>
		<typedef name="yaplbadmessage" classname="yapl.ant.YaplBadMessageCondition" classpath="${build}"/>
	</target>
		
    <!-- define here targets for compiling and running the YAPL compiler -->
    <target name="compile-javacc" description="TODO: compile the YAPL compiler">
        <javacc javacchome="${javacc}" target="${parserfile}" outputdirectory="${parserdir}"/>
    </target>

    <!-- define here targets for compiling and running the YAPL compiler -->
    <target name="compile-java" depends="mkdirs, compile-javacc" description="compile the sources">
        <javac srcdir="${src}" destdir="${build}" debug="on" includeantruntime="false">
            <include name="yapl/impl/backend/*.java"/>
            <include name="yapl/compiler/*.java"/>
            <include name="yapl/interfaces/*.java"/>
            <include name="yapl/lib/*.java"/>
            <include name="yapl/test/backend/rm/*.java"/>
        </javac>
    </target>

    <target name="run" depends="compile-java"
            description="TODO: run the YAPL compiler, writing compiler messages to ${log}">
        <java classname="${parserclass}" output="${log}">
            <classpath>
                <pathelement location="${build}"/>
                <pathelement path="${java.class.path}"/>
            </classpath>
            <arg value="${yapl}"/>
            <arg value="${outfile}"/>
        </java>
    </target>
	
    <target name="eval-compiler-msg" depends="compile-ant-task, run"
        description="evaluate error/OK message of YAPL compiler">
        <fail>
            <condition>
                <yaplbadmessage yapl="${yapl}" log="${log}"/>
            </condition>
        </fail>
    </target>
    
    <target name="eval-all" description="evaluate all test cases of a given compiler 'version'">
        <var name="npassed" value="0"/>
    	<var name="ntotal" value="0"/>
        <for param="yapl">
            <path>
            	<fileset dir="testfiles/${version}" includes="*.yapl"/>
            </path>
            <sequential>
                <trycatch>
                    <try>
                        <antcall target="eval-compiler-msg">
                            <param name="yapl" value="@{yapl}"/>
                            <param name="log" value="@{yapl}.log"/>
                        </antcall>
                        <echo>@{yapl}: PASSED</echo>
                        <math result="npassed" operand1="${npassed}" operation="+" operand2="1" datatype="int"/>
                    </try>
                    <catch>
                        <echo>@{yapl}: FAILED</echo>
                    </catch>
                </trycatch>
                <math result="ntotal" operand1="${ntotal}" operation="+" operand2="1" datatype="int"/>
            </sequential>
        </for>
        <echo>Tests passed: ${npassed}/${ntotal}</echo>
    </target>

    <target name="exec" depends="run" description="execute generated assembler code">
        <java jar="${mars-jar}" fork="true" output="${execlog}">
            <arg value="${outfile}"/>
            <arg value="nc"/>
        </java>
        <replaceregexp file="${execlog}" match="(\r)?\n$" replace="" flags="s"/>
        <echo>Wrote output to ${execlog}</echo>
    </target>

    <target name="eval-codegen" depends="exec"
        description="evaluate code generating compiler by comparing 'execlog' to 'truefile'">
        <fail message="output file is not correct: ${execlog}">
            <condition>
                <not>
                    <filesmatch file1="${execlog}" file2="${truefile}" textfile="true"/>
                </not>
            </condition>
        </fail>
    </target>

    <target name="eval-all-codegen" description="evaluate all test cases of code generating compiler">
        <var name="npassed" value="0"/>
        <var name="ntotal" value="0"/>
        <for param="testname" list="${test-files}">
            <sequential>
                <trycatch>
                    <try>
                        <antcall target="eval-codegen">
                        	<param name="yapl" value="${test-dir}/@{testname}.yapl"/>
                            <param name="outfile" value="${test-dir}/@{testname}.asm"/>
                            <param name="log" value="${test-dir}/@{testname}.log"/>
                            <param name="execlog" value="${test-dir}/@{testname}.execlog"/>
                            <param name="truefile" value="${test-dir}/@{testname}.true"/>
                        </antcall>
                        <echo>@{testname}: PASSED</echo>
                        <math result="npassed" operand1="${npassed}" operation="+" operand2="1" datatype="int"/>
                    </try>
                    <catch>
                        <echo>@{testname}: FAILED</echo>
                    </catch>
                </trycatch>
                <math result="ntotal" operand1="${ntotal}" operation="+" operand2="1" datatype="int"/>
            </sequential>
        </for>
        <echo>Tests passed: ${npassed}/${ntotal}</echo>
    </target>

</project>
